// Example React integration with SelfDB SDK
// NOTE: This example requires React to be installed in your project
// Install with: npm install react @types/react
import React, { useState, useEffect } from 'react'
import { createClient } from '@selfdb/js-sdk'
import type { User } from '@selfdb/js-sdk'

// Initialize SelfDB client
const selfdb = createClient({
  baseUrl: process.env.REACT_APP_SELFDB_URL || 'http://localhost:8000',
  storageUrl: process.env.REACT_APP_SELFDB_STORAGE_URL || 'http://localhost:8001',
  anonKey: process.env.REACT_APP_SELFDB_ANON_KEY! // Required: ensure this is set in your .env
})

interface AuthState {
  user: User | null
  loading: boolean
  error: string | null
}

export default function App() {
  const [auth, setAuth] = useState<AuthState>({
    user: null,
    loading: true,
    error: null
  })
  const [users, setUsers] = useState<User[]>([])
  const [newUserEmail, setNewUserEmail] = useState('')

  // Check authentication on mount
  useEffect(() => {
    const checkAuth = async () => {
      try {
        if (selfdb.auth.isAuthenticated()) {
          const user = await selfdb.auth.getUser()
          setAuth({ user, loading: false, error: null })
        } else {
          setAuth({ user: null, loading: false, error: null })
        }
      } catch (error) {
        setAuth({ user: null, loading: false, error: 'Authentication check failed' })
      }
    }

    checkAuth()
  }, [])

  // Load users when authenticated
  useEffect(() => {
    if (auth.user) {
      loadUsers()
      setupRealtimeSubscription()
    }
  }, [auth.user])

  const loadUsers = async () => {
    try {
      const userList = await selfdb.db.read<User>('users', {
        limit: 10,
        orderBy: [{ column: 'created_at', direction: 'desc' }]
      })
      setUsers(userList)
    } catch (error) {
      console.error('Failed to load users:', error)
    }
  }

  const setupRealtimeSubscription = async () => {
    try {
      await selfdb.realtime.connect()
      selfdb.realtime.subscribe('users', (payload) => {
        console.log('User update received:', payload)
        loadUsers() // Reload users on changes
      })
    } catch (error) {
      console.error('Failed to setup realtime:', error)
    }
  }

  const handleLogin = async (email: string, password: string) => {
    setAuth((prev: AuthState) => ({ ...prev, loading: true, error: null }))
    
    try {
      const { user } = await selfdb.auth.login({ email, password })
      setAuth({ user, loading: false, error: null })
    } catch (error) {
      setAuth({ user: null, loading: false, error: 'Login failed' })
    }
  }

  const handleLogout = async () => {
    try {
      await selfdb.auth.logout()
      selfdb.realtime.disconnect()
      setAuth({ user: null, loading: false, error: null })
      setUsers([])
    } catch (error) {
      console.error('Logout failed:', error)
    }
  }

  const handleCreateUser = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (!newUserEmail) return

    try {
      await selfdb.db.create('users', {
        email: newUserEmail,
        password: 'defaultpassword',
        is_active: true
      })
      setNewUserEmail('')
      // Users will be updated via realtime subscription
    } catch (error) {
      console.error('Failed to create user:', error)
    }
  }

  const handleFileUpload = async (file: File) => {
    try {
      // Get or create a bucket
      const buckets = await selfdb.storage.buckets.listBuckets()
      let bucket = buckets.find(b => b.name === 'uploads')
      
      if (!bucket) {
        bucket = await selfdb.storage.buckets.createBucket({
          name: 'uploads',
          is_public: false,
          description: 'User uploads'
        })
      }

      // Upload the file
      const result = await selfdb.storage.files.uploadFile(bucket.id, file)
      console.log('File uploaded:', result)
    } catch (error) {
      console.error('File upload failed:', error)
    }
  }

  if (auth.loading) {
    return <div>Loading...</div>
  }

  if (!auth.user) {
    return (
      <div className="login-form">
        <h1>SelfDB Login</h1>
        {auth.error && <div className="error">{auth.error}</div>}
        <form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {
          e.preventDefault()
          const formData = new FormData(e.target as HTMLFormElement)
          handleLogin(
            formData.get('email') as string,
            formData.get('password') as string
          )
        }}>
          <input
            type="email"
            name="email"
            placeholder="Email"
            required
          />
          <input
            type="password"
            name="password"
            placeholder="Password"
            required
          />
          <button type="submit" disabled={auth.loading}>
            {auth.loading ? 'Logging in...' : 'Login'}
          </button>
        </form>
      </div>
    )
  }

  return (
    <div className="app">
      <header>
        <h1>SelfDB Dashboard</h1>
        <div>
          Welcome, {auth.user.email}
          <button onClick={handleLogout}>Logout</button>
        </div>
      </header>

      <main>
        <section>
          <h2>Users ({users.length})</h2>
          
          <form onSubmit={handleCreateUser}>
            <input
              type="email"
              value={newUserEmail}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewUserEmail(e.target.value)}
              placeholder="New user email"
              required
            />
            <button type="submit">Add User</button>
          </form>

          <ul>
            {users.map((user: User) => (
              <li key={user.id}>
                {user.email} - {user.is_active ? 'Active' : 'Inactive'}
                <small>{new Date(user.created_at).toLocaleDateString()}</small>
              </li>
            ))}
          </ul>
        </section>

        <section>
          <h2>File Upload</h2>
          <input
            type="file"
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
              const file = e.target.files?.[0]
              if (file) handleFileUpload(file)
            }}
          />
        </section>
      </main>
    </div>
  )
}